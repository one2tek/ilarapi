<?php

namespace DummyNamespace;

use DummyPath\Repositories\DummyVariableRepository;
use Illuminate\Events\Dispatcher;
use DummyPath\Exceptions\DummyVariableNotFoundException;
use DummyPath\Events\DummyVariableWasCreated;
use DummyPath\Events\DummyVariableWasUpdated;
use DummyPath\Events\DummyVariableWasDeleted;

class DummyClass
{
    private $dummyVariableRepository;
    private $dispatcher;

    public function __construct(
        DummyVariableRepository $dummyVariableRepository,
        Dispatcher $dispatcher
    ) {
        $this->dummyVariableRepository = $dummyVariableRepository;
        $this->dispatcher = $dispatcher;
    }

    public function getAll($options = [])
    {
        return $this->dummyVariableRepository->getWithCount($options);
    }
 
    public function getById($dummyVariableId, array $options = [])
    {
        $dummyVariable = $this->getRequestedDummyVariable($dummyVariableId, $options);
 
        return $dummyVariable;
    }
 
    public function create($data)
    {
        $dummyVariable = $this->dummyVariableRepository->create($data);

        $this->dispatcher->dispatch(new DummyVariableWasCreated($dummyVariable));

        return $dummyVariable;
    }
 
    public function update($dummyVariableId, array $data)
    {
        $dummyVariable = $this->getRequestedDummyVariable($dummyVariableId);
 
        $this->dummyVariableRepository->update($dummyVariable, $data);

        $this->dispatcher->dispatch(new DummyVariableWasUpdated($dummyVariable));
  
        return $dummyVariable;
    }
 
    public function delete($dummyVariableId)
    {
        $dummyVariable = $this->getRequestedDummyVariable($dummyVariableId);
 
        $this->dummyVariableRepository->delete($dummyVariableId);

        $this->dispatcher->dispatch(new DummyVariableWasDeleted($dummyVariable));
    }
 
    public function getRequestedDummyVariable($dummyVariableId, $options = [])
    {
        $dummyVariable = $this->dummyVariableRepository->getById($dummyVariableId, $options);
        
        if (is_null($dummyVariable)) {
            throw new DummyVariableNotFoundException;
        }
 
        return $dummyVariable;
    }
}
